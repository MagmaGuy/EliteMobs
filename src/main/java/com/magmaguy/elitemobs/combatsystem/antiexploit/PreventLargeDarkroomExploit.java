package com.magmaguy.elitemobs.combatsystem.antiexploit;

import com.magmaguy.elitemobs.api.EliteMobDamagedByPlayerAntiExploitEvent;
import com.magmaguy.elitemobs.config.AntiExploitConfig;
import com.magmaguy.elitemobs.utils.NonSolidBlockTypes;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.util.Vector;

public class PreventLargeDarkroomExploit implements Listener {

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityDamage(EliteMobDamagedByPlayerAntiExploitEvent event) {
        if (event.isCancelled()) return;
        antiHopper(event);

        Vector ray = event.getEliteMobDamagedByPlayerEvent().getPlayer().getLocation().clone().subtract(event.getEliteMobEntity().getLivingEntity().getLocation()).toVector();
        ray.normalize();
        boolean playerIsBelow = ray.getY() < 0;
        boolean playerIsAbove = ray.getY() > 0;
        ray.setY(0);
        ray.multiply(0.5);
        Location rayTraceLocation = event.getEliteMobEntity().getLivingEntity().getLocation().clone();
        Location eyeLevelBlockLocation, floorBlockLocation, previousFloorBlockLocation = null;


        for (int i = 0; i < 12; i++) {
            if (event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(event.getEliteMobDamagedByPlayerEvent().getPlayer().getLocation()) <
                    event.getEliteMobEntity().getLivingEntity().getLocation().distanceSquared(rayTraceLocation))
                return;
            rayTraceLocation.add(ray);
            eyeLevelBlockLocation = rayTraceLocation.clone().add(new Vector(0, 1, 0));
            floorBlockLocation = rayTraceLocation.clone().subtract(new Vector(0, 1, 0));

            if (!NonSolidBlockTypes.isNonSolidBlock(rayTraceLocation.getBlock().getType()) ||
                    !NonSolidBlockTypes.isNonSolidBlock(eyeLevelBlockLocation.getBlock().getType())) {

                if (solidWall(rayTraceLocation, eyeLevelBlockLocation)) {
                    event.getEliteMobEntity().incrementAntiExploit(3, "largeDarkroomAntiexploit2");
                    event.setTriggered(true);
                    return;
                }

                if (playerIsBelow)
                    if (previousFloorBlockLocation != null)
                        if (antiShortStairs(rayTraceLocation, floorBlockLocation, previousFloorBlockLocation)) {
                            event.getEliteMobEntity().incrementAntiExploit(11, "largeDarkroomAntiexploit3");
                            event.setTriggered(true);
                            return;
                        }

                if (antiWindow(floorBlockLocation, rayTraceLocation, eyeLevelBlockLocation)) {
                    event.getEliteMobEntity().incrementAntiExploit(5, "largeDarkroomAntiexploit4");
                    event.setTriggered(true);
                    return;
                }

                break;

            }

            previousFloorBlockLocation = floorBlockLocation.clone();

            //new DebugBlockLocation(rayTraceLocation);
            //new DebugBlockLocation(eyeLevelBlockLocation);
            //new DebugBlockLocation(floorBlockLocation);
        }

    }

    private void antiHopper(EliteMobDamagedByPlayerAntiExploitEvent event) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit1) return;
        if (event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER) ||
                event.getEliteMobEntity().getLivingEntity().getLocation().clone().subtract(new Vector(0, 1, 0)).getBlock().getType().equals(Material.HOPPER)) {
            event.getEliteMobEntity().incrementAntiExploit(5, "largeRoomAntiExploit1");
            event.setTriggered(true);
        }
    }

    /*
Looks if there's 2 solid blocks (player height) between the player and the entity
 */
    private boolean solidWall(Location footLevel, Location eyeLevel) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit2) return false;
        if (!NonSolidBlockTypes.isNonSolidBlock(footLevel.getBlock().getType()) && !NonSolidBlockTypes.isNonSolidBlock(eyeLevel.getBlock().getType()))
            return true;
        return footLevel.getBlock().getType().equals(Material.ACACIA_FENCE) || footLevel.getBlock().getType().equals(Material.ACACIA_FENCE_GATE) ||
                footLevel.getBlock().getType().equals(Material.BIRCH_FENCE) || footLevel.getBlock().getType().equals(Material.BIRCH_FENCE_GATE) ||
                footLevel.getBlock().getType().equals(Material.DARK_OAK_FENCE) || footLevel.getBlock().getType().equals(Material.DARK_OAK_FENCE_GATE) ||
                footLevel.getBlock().getType().equals(Material.JUNGLE_FENCE) || footLevel.getBlock().getType().equals(Material.JUNGLE_FENCE_GATE) ||
                footLevel.getBlock().getType().equals(Material.NETHER_BRICK_FENCE) ||
                footLevel.getBlock().getType().equals(Material.SPRUCE_FENCE) || footLevel.getBlock().getType().equals(Material.SPRUCE_FENCE_GATE) ||
                footLevel.getBlock().getType().equals(Material.BRICK_WALL) ||
                footLevel.getBlock().getType().equals(Material.ANDESITE_WALL) ||
                footLevel.getBlock().getType().equals(Material.COBBLESTONE_WALL) ||
                footLevel.getBlock().getType().equals(Material.DIORITE_WALL) ||
                footLevel.getBlock().getType().equals(Material.END_STONE_BRICK_WALL) ||
                footLevel.getBlock().getType().equals(Material.GRANITE_WALL) ||
                footLevel.getBlock().getType().equals(Material.MOSSY_COBBLESTONE_WALL) ||
                footLevel.getBlock().getType().equals(Material.MOSSY_STONE_BRICK_WALL) ||
                footLevel.getBlock().getType().equals(Material.NETHER_BRICK_WALL) ||
                footLevel.getBlock().getType().equals(Material.PRISMARINE_WALL) ||
                footLevel.getBlock().getType().equals(Material.RED_NETHER_BRICK_WALL) ||
                footLevel.getBlock().getType().equals(Material.RED_SANDSTONE_WALL) ||
                footLevel.getBlock().getType().equals(Material.SANDSTONE_WALL) ||
                footLevel.getBlock().getType().equals(Material.STONE_BRICK_WALL);
    }

    private boolean antiShortStairs(Location footLevel, Location floorLevel, Location previousFloorLevel) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit3) return false;
        return !NonSolidBlockTypes.isNonSolidBlock(footLevel.getBlock().getType()) ||
                !NonSolidBlockTypes.isNonSolidBlock(floorLevel.getBlock().getType()) ||
                !NonSolidBlockTypes.isNonSolidBlock(previousFloorLevel.getBlock().getType());
    }

    private boolean antiWindow(Location floorLocation, Location footLocation, Location eyeLocation) {
        if (!AntiExploitConfig.largeDarkroomAntiexploit4) return false;
        if (!NonSolidBlockTypes.isNonSolidBlock(floorLocation.getBlock().getType()) &&
                !NonSolidBlockTypes.isNonSolidBlock(footLocation.getBlock().getType()))
            return !NonSolidBlockTypes.isNonSolidBlock(eyeLocation.getBlock().getType()) ||
                    !NonSolidBlockTypes.isNonSolidBlock(eyeLocation.clone().add(new Vector(0, 1, 0)).getBlock().getType());
        return false;
    }

}
